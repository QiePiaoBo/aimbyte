package com.dylan.learnthread.bosszhipin;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * @author Dylan
 * @Date : Created in 8:29 2021/4/29
 * @Description :
 * @Function :
 */
public class PenTest {
    static class User {
        public User(Integer age) {
            this.age = age;
        }

        private Integer age;

        public Integer getAge() {
            return age;
        }
    }

    public static void main(String[] args) {

        // 1.
        ans1();
        // 2.
        ans2();
        // 3.
        ans3();
        // 4.
        ans4();

    }

    /**
     * 4. 答案
     */
    private static void ans4() {
        System.out.println("(4)代码：");
        System.out.println("public class PenTestDemo {\n" +
                "\n" +
                "    public static void main(String[] args) {\n" +
                "        new Thread(new TC()).start();\n" +
                "    }\n" +
                "\n" +
                "}\n" +
                "\n" +
                "class TA implements Runnable{\n" +
                "\n" +
                "    @Override\n" +
                "    public void run() {\n" +
                "        System.out.println(\"A start.\");\n" +
                "        Demo.sleep(1000);\n" +
                "        System.out.println(\"A end.\");\n" +
                "    }\n" +
                "}\n" +
                "class TB implements Runnable{\n" +
                "\n" +
                "    @Override\n" +
                "    public void run() {\n" +
                "        System.out.println(\"B start.\");\n" +
                "        Demo.sleep(1000);\n" +
                "        try {\n" +
                "            Thread ta = new Thread(new TA());\n" +
                "            ta.start();\n" +
                "            ta.join();\n" +
                "        } catch (InterruptedException e) {\n" +
                "            e.printStackTrace();\n" +
                "        }\n" +
                "        Demo.sleep(1000);\n" +
                "        System.out.println(\"B end.\");\n" +
                "    }\n" +
                "}\n" +
                "class TC implements Runnable{\n" +
                "\n" +
                "    @Override\n" +
                "    public void run() {\n" +
                "        System.out.println(\"C start.\");\n" +
                "        Thread tb = new Thread(new TB());\n" +
                "        Demo.sleep(1000);\n" +
                "        try {\n" +
                "            tb.start();\n" +
                "            tb.join();\n" +
                "        } catch (InterruptedException e) {\n" +
                "            e.printStackTrace();\n" +
                "        }\n" +
                "        Demo.sleep(1000);\n" +
                "        System.out.println(\"C end.\");\n" +
                "    }\n" +
                "}\n" +
                "\n" +
                "class Demo{\n" +
                "    public static void sleep(Integer time){\n" +
                "        try {\n" +
                "            Thread.sleep(time);\n" +
                "        } catch (InterruptedException e) {\n" +
                "            e.printStackTrace();\n" +
                "        }\n" +
                "    }\n" +
                "}");
    }

    /**
     * 3.答案
     */
    private static void ans3() {
        // 模拟数据初始化
        int[] a = new int[]{20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
        // 目标长度
        int aimLength = 10;
        int i, j, minPlace, temp;
        // 循环
        for (i = 0; i < aimLength; i++) {
            minPlace = i;
            for (j = i; j < a.length; j++) {
                if (a[minPlace] > a[j])
                    minPlace = j;
            }
            temp = a[i];
            a[i] = a[minPlace];
            a[minPlace] = temp;
        }
        // 打印结果
        for (int k = 0; k < aimLength; k++) {
//            System.out.print(a[k] + " ");
        }

        System.out.println("(3)代码：");
        System.out.println("    private static void ans3() {\n" +
                "        // 模拟数据初始化\n" +
                "        int[] a = new int[]{20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0};\n" +
                "        // 目标长度\n" +
                "        int aimLength = 10;\n" +
                "        int i, j, minPlace, temp;\n" +
                "        // 循环\n" +
                "        for (i = 0; i < aimLength; i++) {\n" +
                "            minPlace = i;\n" +
                "            for (j = i; j < a.length; j++) {\n" +
                "                if (a[minPlace] > a[j])\n" +
                "                    minPlace = j;\n" +
                "            }\n" +
                "            temp = a[i];\n" +
                "            a[i] = a[minPlace];\n" +
                "            a[minPlace] = temp;\n" +
                "        }\n" +
                "        // 打印结果\n" +
                "        for (int k = 0; k < aimLength; k++) {\n" +
                "            System.out.print(a[k] + \" \");\n" +
                "        }\n" +
                "    }");
    }

    /**
     * 2.答案
     */
    private static void ans2() {
        System.out.println("(2)sql语句：");
        System.out.println("select a.name , count(employee_id) as c from employee a left join vacation b on a.id = b.employee_id group by a.id order by c desc;");
    }

    /**
     * 1.答案
     */
    private static void ans1() {
        List<User> users = new ArrayList<>();
        users.add(new User(23));
        users.add(new User(17));
        users.add(new User(18));
        users.add(new User(27));
        users.add(new User(23));

        List<User> newUsers = users.stream()
                .filter(s -> s.getAge() > 20)
                .collect(Collectors.toList());
        for (User u : newUsers) {
            System.out.print(u.getAge() + " ");
        }
        System.out.println("(1)代码：");
        System.out.println("    private static void ans1(){\n" +
                "        List<User> users = new ArrayList<>();\n" +
                "        users.add(new User(23));\n" +
                "        users.add(new User(17));\n" +
                "        users.add(new User(18));\n" +
                "        users.add(new User(27));\n" +
                "        users.add(new User(23));\n" +
                "\n" +
                "        List<User> newUsers = users.stream()\n" +
                "                .filter(s->s.getAge() > 20)\n" +
                "                .collect(Collectors.toList());\n" +
                "        for (User u : newUsers){\n" +
                "            System.out.print(u.getAge() + \" \");\n" +
                "        }\n" +
                "\n" +
                "    }");

    }

}
